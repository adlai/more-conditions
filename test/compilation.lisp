;;; compilation.lisp --- Test compiler macros provided by more-conditions.
;;
;; Copyright (C) 2012 Jan Moringen
;;
;; Author: Jan Moringen <jmoringe@techfak.uni-bielefeld.de>
;;
;; This Program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This Program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses>.

(cl:in-package :more-conditions.test)

(deftestsuite compilation-root (root)
  ()
  (:documentation
   "Test suite for the compiler macros provided by the more-conditions
system."))

(addtest (compilation-root
          :documentation
	  "Test the style warnings generated by compiler macros for
`missing-required-initarg' and `incompatible-initargs'")
  class-not-found-warning

  (macrolet ((compile/silent (&body body)
	       `(let* ((*standard-output* (make-broadcast-stream))
		       (*error-output*    *standard-output*))
		  (compile nil '(lambda () ,@body)))))

    ;; `missing-required-initarg' in default-initargs does not refer
    ;; to the containing class (or rather any defined class).
    (ensure-condition style-warning
      (compile/silent (defclass foo () ()
			(:default-initargs
			 :baz (missing-required-initarg 'bar :baz)))))

    ;; `incompatible-initargs' does not refer to an existing class.
    (ensure-condition style-warning
      (compile/silent (defun make-bar ()
			(incompatible-initargs 'bar :baz))))))
